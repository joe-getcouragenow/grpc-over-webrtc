// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package signaling

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SignalingServiceClient is the client API for SignalingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalingServiceClient interface {
	Offer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
}

type signalingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalingServiceClient(cc grpc.ClientConnInterface) SignalingServiceClient {
	return &signalingServiceClient{cc}
}

func (c *signalingServiceClient) Offer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	out := new(OfferResponse)
	err := c.cc.Invoke(ctx, "/signaling.SignalingService/Offer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalingServiceServer is the server API for SignalingService service.
// All implementations must embed UnimplementedSignalingServiceServer
// for forward compatibility
type SignalingServiceServer interface {
	Offer(context.Context, *OfferRequest) (*OfferResponse, error)
	mustEmbedUnimplementedSignalingServiceServer()
}

// UnimplementedSignalingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignalingServiceServer struct {
}

func (*UnimplementedSignalingServiceServer) Offer(context.Context, *OfferRequest) (*OfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offer not implemented")
}
func (*UnimplementedSignalingServiceServer) mustEmbedUnimplementedSignalingServiceServer() {}

func RegisterSignalingServiceServer(s *grpc.Server, srv SignalingServiceServer) {
	s.RegisterService(&_SignalingService_serviceDesc, srv)
}

func _SignalingService_Offer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalingServiceServer).Offer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/signaling.SignalingService/Offer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalingServiceServer).Offer(ctx, req.(*OfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignalingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "signaling.SignalingService",
	HandlerType: (*SignalingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Offer",
			Handler:    _SignalingService_Offer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "signaling/signaling.proto",
}
